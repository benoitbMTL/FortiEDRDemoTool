import customtkinter as ctk
import tkinter as tk

class MalwareBazaarView:
    def __init__(self, options_frame, results_frame):
        self.options_frame = options_frame
        self.results_frame = results_frame
        self.filetype_buttons = []
        self.tag_buttons = []
        self.selected_filetype = "exe"
        self.selected_tag = None

        # Grouped file types and tags
        self.filetype_groups = {
            "Executables": ["exe", "dll", "msi"],
            "Scripts": ["ps1", "bat", "js", "vbs"],
            "Documents": ["doc", "docx", "xls", "xlsx", "pdf"],
            "Archives / Images": ["zip", "rar", "iso"]
        }

        self.tag_groups = {
            "RATs / Stealers": ["agenttesla", "remcos", "lokibot", "redline", "formbook", "nanocore", "rat", "infostealer", "mirai"],
            "Banking / Loaders": ["emotet", "quakbot", "dridex"],
            "Generic Tags": ["ransomware", "trojan", "downloader"]
        }

        self.show_interface()

    def show_interface(self):
        # Title
        ctk.CTkLabel(self.options_frame, text="Download recent malware samples from MalwareBazaar", font=("Arial", 16, "bold"), text_color="#FFA500").pack(pady=(10, 0), padx=10, anchor="w")

        # Subtitle
        ctk.CTkLabel(self.options_frame, text="Select a file type or a tag", font=("Arial", 14), text_color="white").pack(pady=(0, 10), padx=10, anchor="w")

        # === Scrollable Frame ===
        canvas = tk.Canvas(self.options_frame, highlightthickness=0, bg="#212121", bd=0)
        canvas.pack(side="top", fill="both", expand=True, padx=10)

        # Inner frame inside the canvas
        inner_frame = ctk.CTkFrame(canvas, fg_color="transparent")
        window_id = canvas.create_window((0, 0), window=inner_frame, anchor="nw")

        def on_configure(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        inner_frame.bind("<Configure>", on_configure)

        def resize_width(event):
            canvas.itemconfig(window_id, width=event.width)
        canvas.bind("<Configure>", resize_width)

        def on_mousewheel(event):
            canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
        canvas.bind_all("<MouseWheel>", on_mousewheel)

        canvas.configure(yscrollcommand=lambda *args: None)  # No visible scrollbar

        # === Container for columns ===
        criteria_frame = ctk.CTkFrame(inner_frame, fg_color="transparent")
        criteria_frame.pack(pady=0)

        # Columns
        filetype_col = ctk.CTkFrame(criteria_frame, fg_color="transparent", width=140)
        filetype_col.pack(side="left", padx=(0, 30), fill="y")
        filetype_col.pack_propagate(True)

        tag_col = ctk.CTkFrame(criteria_frame, fg_color="transparent", width=140)
        tag_col.pack(side="left", padx=(30, 0), fill="y")
        tag_col.pack_propagate(True)

        # File Types
        ctk.CTkLabel(filetype_col, text="File Types", font=("Arial", 14, "bold"), text_color="#FFA500").pack(anchor="w", pady=(0, 5))
        for group, types in self.filetype_groups.items():
            ctk.CTkLabel(filetype_col, text=group, font=("Arial", 11, "bold"), text_color="white").pack(anchor="w", pady=(10, 2))
            for ft in types:
                is_selected = ft == self.selected_filetype
                btn = ctk.CTkButton(filetype_col, text=ft, width=140, command=lambda f=ft: self.select_filetype(f),
                                    fg_color="#FFA500" if is_selected else "#2e2e2e",
                                    hover_color="#FFA500" if is_selected else "#444444",
                                    text_color="white")
                btn.pack(pady=2, fill="x")
                self.filetype_buttons.append(btn)

        # Tags
        ctk.CTkLabel(tag_col, text="Tags", font=("Arial", 14, "bold"), text_color="#FFA500").pack(anchor="w", pady=(0, 5))
        for group, tags in self.tag_groups.items():
            ctk.CTkLabel(tag_col, text=group, font=("Arial", 11, "bold"), text_color="white").pack(anchor="w", pady=(10, 2))
            for tg in tags:
                btn = ctk.CTkButton(tag_col, text=tg, width=140, command=lambda t=tg: self.select_tag(t),
                                    fg_color="#2e2e2e", hover_color="#444444", text_color="white")
                btn.pack(pady=2, fill="x")
                self.tag_buttons.append(btn)

        # === Download area at bottom ===
        bottom_frame = ctk.CTkFrame(self.options_frame, fg_color="transparent")
        bottom_frame.pack(side="bottom", fill="x", padx=10, pady=(5, 20))

        inner = ctk.CTkFrame(bottom_frame, fg_color="transparent")
        inner.pack(side="right")

        ctk.CTkLabel(inner, text="Number of Files:", font=("Arial", 12)).pack(side="left", padx=(0, 5))
        self.mb_num_files = ctk.CTkEntry(inner, width=60, placeholder_text="1")
        self.mb_num_files.insert(0, "1")
        self.mb_num_files.pack(side="left", padx=(0, 10))
        ctk.CTkButton(inner, text="Download", command=self.execute, width=100).pack(side="left")

        # Right panel results
        self.result_box = ctk.CTkTextbox(self.results_frame)
        self.result_box.pack(expand=True, fill="both", padx=10, pady=10)
        self.result_box.insert("0.0", "MalwareBazaar results will appear here...")

        self.select_filetype("exe")

    def select_filetype(self, selected):
        self.selected_filetype = selected
        self.selected_tag = None

        for btn in self.filetype_buttons:
            is_selected = btn.cget("text") == selected
            btn.configure(
                fg_color="#FFA500" if is_selected else "#2e2e2e",
                hover_color="#FFA500" if is_selected else "#444444",
                text_color="white"
            )

        for btn in self.tag_buttons:
            btn.configure(
                fg_color="#2e2e2e",
                hover_color="#444444",
                text_color="white"
            )

    def select_tag(self, selected):
        self.selected_tag = selected
        self.selected_filetype = None

        for btn in self.tag_buttons:
            is_selected = btn.cget("text") == selected
            btn.configure(
                fg_color="#FFA500" if is_selected else "#2e2e2e",
                hover_color="#FFA500" if is_selected else "#444444",
                text_color="white"
            )

        for btn in self.filetype_buttons:
            btn.configure(
                fg_color="#2e2e2e",
                hover_color="#444444",
                text_color="white"
            )

    def execute(self):
        file_type = self.selected_filetype or "None"
        tag = self.selected_tag or "None"
        num = self.mb_num_files.get() or "1"

        summary = f"""Downloading samples from MalwareBazaar...

Selected:
- File Type: {file_type}
- Tag: {tag}
- Number of Files: {num}

[Simulated download output...]
"""
        self.result_box.delete("0.0", "end")
        self.result_box.insert("0.0", summary)
