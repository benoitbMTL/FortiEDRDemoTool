import customtkinter as ctk
import tkinter as tk
from CTkSpinbox import *
from backend.malware_backend import run_malwarebazaar_action, open_download_folder
import threading
import os
import subprocess

class MalwareBazaarView:
    def __init__(self, options_frame, results_frame):
        self.options_frame = options_frame
        self.results_frame = results_frame
        self.filetype_buttons = []
        self.tag_buttons = []
        self.selected_filetype = "exe"
        self.selected_tag = None

        self.filetype_groups = {
            "Executables": ["exe", "dll", "msi"],
            "Scripts": ["ps1", "bat", "js", "vbs"],
            "Documents": ["doc", "docx", "xls", "xlsx", "pdf"],
            "Archives / Images": ["zip", "rar", "iso"]
        }

        self.tag_groups = {
            "RATs / Stealers": ["agenttesla", "remcos", "lokibot", "redline", "formbook", "nanocore", "rat", "infostealer", "mirai"],
            "Banking / Loaders": ["emotet", "quakbot", "dridex"],
            "Generic Tags": ["ransomware", "trojan", "downloader"]
        }

        self.show_interface()

    def show_interface(self):
        ctk.CTkLabel(self.options_frame, text="Download recent malware samples from MalwareBazaar", font=("Arial", 16, "bold"), text_color="#FFA500").pack(pady=(10, 0), padx=10, anchor="w")
        ctk.CTkLabel(self.options_frame, text="Select a file type or a tag", font=("Arial", 14), text_color="white").pack(pady=(0, 10), padx=10, anchor="w")

        canvas = tk.Canvas(self.options_frame, highlightthickness=0, bg="#212121", bd=0)
        canvas.pack(side="top", fill="both", expand=True, padx=10)

        inner_frame = ctk.CTkFrame(canvas, fg_color="transparent")
        window_id = canvas.create_window((0, 0), window=inner_frame, anchor="nw")

        def on_configure(event): canvas.configure(scrollregion=canvas.bbox("all"))
        def resize_width(event): canvas.itemconfig(window_id, width=event.width)
        def on_mousewheel(event): canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

        inner_frame.bind("<Configure>", on_configure)
        canvas.bind("<Configure>", resize_width)
        canvas.bind_all("<MouseWheel>", on_mousewheel)
        canvas.configure(yscrollcommand=lambda *args: None)

        criteria_frame = ctk.CTkFrame(inner_frame, fg_color="transparent")
        criteria_frame.pack(pady=0)

        filetype_col = ctk.CTkFrame(criteria_frame, fg_color="transparent", width=140)
        filetype_col.pack(side="left", padx=(0, 30), fill="y")
        tag_col = ctk.CTkFrame(criteria_frame, fg_color="transparent", width=140)
        tag_col.pack(side="left", padx=(30, 0), fill="y")

        ctk.CTkLabel(filetype_col, text="File Types", font=("Arial", 14, "bold"), text_color="#FFA500").pack(anchor="w", pady=(0, 5))
        for group, types in self.filetype_groups.items():
            ctk.CTkLabel(filetype_col, text=group, font=("Arial", 11, "bold"), text_color="white").pack(anchor="w", pady=(10, 2))
            for ft in types:
                is_selected = ft == self.selected_filetype
                btn = ctk.CTkButton(filetype_col, text=ft, width=140, command=lambda f=ft: self.select_filetype(f),
                                    fg_color="#FFA500" if is_selected else "#2e2e2e",
                                    hover_color="#FFA500" if is_selected else "#444444",
                                    text_color="white")
                btn.pack(pady=2, fill="x")
                self.filetype_buttons.append(btn)

        ctk.CTkLabel(tag_col, text="Tags", font=("Arial", 14, "bold"), text_color="#FFA500").pack(anchor="w", pady=(0, 5))
        for group, tags in self.tag_groups.items():
            ctk.CTkLabel(tag_col, text=group, font=("Arial", 11, "bold"), text_color="white").pack(anchor="w", pady=(10, 2))
            for tg in tags:
                btn = ctk.CTkButton(
                    tag_col,
                    text=tg,
                    width=140,
                    command=lambda t=tg: self.select_tag(t),
                    fg_color="#FFA500" if is_selected else "#2e2e2e",
                    hover_color="#FFA500" if is_selected else "#444444",
                    text_color="white"
                )
                btn.pack(pady=2, fill="x")
                self.tag_buttons.append(btn)

        # Bottom section with 2 right-aligned rows
        bottom_frame = ctk.CTkFrame(self.options_frame, fg_color="transparent")
        bottom_frame.pack(side="bottom", fill="x", padx=10, pady=(5, 20))

        # === First row: Number input + Download ===
        row1 = ctk.CTkFrame(bottom_frame, fg_color="transparent")
        row1.pack(side="top", anchor="e")  # align right

        ctk.CTkLabel(row1, text="Number of Files:", font=("Arial", 12)).pack(side="left", padx=(0, 5))

        self.mb_num_files = ctk.CTkOptionMenu(
            row1,
            width=60,
            values=["1", "2", "3", "4", "5"],
            command=self.validate_num_files  # Optional: immediate display of an error if ever
        )
        self.mb_num_files.pack(side="left", padx=(0, 10))
        self.mb_num_files.set("1")

        self.download_btn = ctk.CTkButton(row1, text="Download", command=self.execute_download, width=100,
                                        fg_color="#1f6aa5", hover_color="#1f6aa5", text_color="white")
        self.download_btn.pack(side="left", padx=(0, 10))

        # === Second row: SSL + Other buttons ===
        row2 = ctk.CTkFrame(bottom_frame, fg_color="transparent")
        row2.pack(side="top", anchor="e", pady=(5, 0))  # align right

        btn_style = {"fg_color": "#2e2e2e", "hover_color": "#444444", "text_color": "white"}

        ssl_wrapper = ctk.CTkFrame(row2, fg_color="transparent")
        ssl_wrapper.pack(side="left", padx=(0, 15))

        ctk.CTkLabel(ssl_wrapper, text="SSL Inspection", font=("Arial", 12), text_color="white").pack(side="left", padx=(0, 5))
        self.ca_switch = ctk.CTkSwitch(ssl_wrapper, text="", command=self.toggle_ca)
        self.ca_switch.pack(side="left")
        self.ca_switch.select()
        os.environ["USE_CUSTOM_CA"] = "True"

        self.info_btn = ctk.CTkButton(row2, text="Check Samples", command=self.execute_info, width=110, **btn_style)
        self.info_btn.pack(side="left", padx=(0, 10))

        self.open_btn = ctk.CTkButton(row2, text="Open Folder", command=open_download_folder, width=100, **btn_style)
        self.open_btn.pack(side="left", padx=(0, 10))

        self.result_box = ctk.CTkTextbox(self.results_frame, font=("Courier New", 13))
        self.result_box.pack(expand=True, fill="both", padx=10, pady=10)
        self.result_box.tag_config("filename", foreground="red")
        self.result_box.tag_config("orange", foreground="#FFA500")
        self.result_box.tag_config("green", foreground="lightgreen")
        self.result_box.tag_config("red", foreground="red")

        self.select_filetype("exe")

    def toggle_ca(self):
        os.environ["USE_CUSTOM_CA"] = "True" if self.ca_switch.get() else "False"

    def select_filetype(self, selected):
        self.selected_filetype = selected
        self.selected_tag = None
        for btn in self.filetype_buttons:
            is_selected = btn.cget("text") == selected
            btn.configure(
                fg_color="#FFA500" if is_selected else "#2e2e2e",
                hover_color="#FFA500" if is_selected else "#444444"
            )
        for btn in self.tag_buttons:
            btn.configure(fg_color="#2e2e2e")

    def select_tag(self, selected):
        self.selected_tag = selected
        self.selected_filetype = None
        for btn in self.tag_buttons:
            is_selected = btn.cget("text") == selected
            btn.configure(
                fg_color="#FFA500" if is_selected else "#2e2e2e",
                hover_color="#FFA500" if is_selected else "#444444"
            )
        for btn in self.filetype_buttons:
            btn.configure(fg_color="#2e2e2e")

    def execute_common(self, action_func, button):
        file_type = self.selected_filetype
        tag = self.selected_tag
        num_raw = self.mb_num_files.get()
        num = int(num_raw)

        # Dynamically update the button text to show action in progress
        original_text = button.cget("text")
        if original_text == "Download":
            button.configure(text="Downloading...", state="disabled")
        elif original_text == "Check Samples":
            button.configure(text="Checking...", state="disabled")
        else:
            button.configure(text="Working...", state="disabled")

        cert_info = os.getenv("USE_CUSTOM_CA", "False")
        cert_line = "Using Fortinet_CA_SSL.cer (SSL inspection enabled)" if cert_info.lower() == "true" else "Standard SSL connection (no SSL inspection)"
        selected = f"Selected Tag: '{tag}'" if tag else f"Selected File Type: '{file_type}'"
        recap = f"{selected}\nNumber of Files: {num}\nCertificate: {cert_line}\n\n"

        self.result_box.delete("0.0", "end")
        self.result_box.insert("end", recap)
        self.result_box.insert("end", "Connecting to MalwareBazaar...\n\n", "orange")

        def task():
            try:
                result = action_func(tag=tag, file_type=file_type, limit=num)
            except Exception as e:
                result = f"[ERROR] {str(e)}"

            def display():
                for line in result.strip().splitlines():
                    line = line.rstrip()

                    # Special case: summary line of download result
                    if "file(s) downloaded successfully" in line.lower():
                        try:
                            number = int(line.split()[0])
                            if number == 0:
                                self.result_box.insert("end", line + "\n", "red")
                            else:
                                self.result_box.insert("end", line + "\n", "green")
                        except Exception:
                            self.result_box.insert("end", line + "\n")  # fallback

                    # Highlight metadata key in orange
                    elif line.startswith("- "):
                        key, _, value = line.partition(":")
                        key = key.strip() + ":"
                        value = value.strip()

                        if "success" in value.lower():
                            self.result_box.insert("end", f"  {key} ", "orange")
                            self.result_box.insert("end", f"{value}\n", "green")
                        elif "failed" in value.lower():
                            self.result_box.insert("end", f"  {key} ", "orange")
                            self.result_box.insert("end", f"{value}\n", "red")
                        else:
                            self.result_box.insert("end", f"  {key} ", "orange")
                            self.result_box.insert("end", f"{value}\n")

                    elif line.lower() == "done!":
                        self.result_box.insert("end", "\nDone!\n", "orange")

                    else:
                        self.result_box.insert("end", line + "\n", "filename")

                # Reset button to original label
                button.configure(
                    text="Download" if button == self.download_btn else "Check Samples",
                    state="normal"
                )

            self.result_box.after(0, display)

        threading.Thread(target=task).start()

    def execute_download(self):
        self.execute_common(lambda **kwargs: run_malwarebazaar_action(**kwargs, only_info=False), self.download_btn)

    def execute_info(self):
        self.execute_common(lambda **kwargs: run_malwarebazaar_action(**kwargs, only_info=True), self.info_btn)

    def validate_num_files(self, value):
        try:
            num = int(value)
            if not (1 <= num <= 5):
                raise ValueError
        except ValueError:
            self.result_box.insert("end", "[ERROR] Please choose a value between 1 and 5.\n", "red")
